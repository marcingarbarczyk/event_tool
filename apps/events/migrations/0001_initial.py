# Generated by Django 5.1.3 on 2024-11-13 22:10

import ckeditor_uploader.fields
import django.contrib.postgres.fields.ranges
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import apps.events.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dynamo_forms', '0001_initial'),
        ('script_manager', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Counter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='title')),
                ('value', models.IntegerField(default=0, verbose_name='value')),
            ],
            options={
                'verbose_name': 'counter',
                'verbose_name_plural': 'counters',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='title')),
                ('entry', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='entry')),
                (
                    'description',
                    ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='description'),
                ),
                ('image', models.ImageField(blank=True, null=True, upload_to='news/', verbose_name='image')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='publication date')),
                ('slug', models.SlugField(blank=True, max_length=100, null=True, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'News',
                'verbose_name_plural': 'News',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('image', models.ImageField(blank=True, null=True, upload_to='partners/', verbose_name='image')),
                ('url', models.URLField(blank=True, null=True, verbose_name='link')),
            ],
            options={
                'verbose_name': 'partner',
                'verbose_name_plural': 'partners',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('image', models.ImageField(upload_to='photos/', verbose_name='photo')),
            ],
            options={
                'verbose_name': 'photo',
                'verbose_name_plural': 'photos',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook_link', models.URLField(blank=True, null=True, verbose_name='facebook page')),
                ('youtube_link', models.URLField(blank=True, null=True, verbose_name='youtube page')),
                ('instagram_link', models.URLField(blank=True, null=True, verbose_name='instagram page')),
                ('x_link', models.URLField(blank=True, null=True, verbose_name='x page')),
                ('tiktok_link', models.URLField(blank=True, null=True, verbose_name='tiktok page')),
                ('name', models.CharField(max_length=100, verbose_name='full name')),
                (
                    'description',
                    ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='description'),
                ),
                ('image', models.ImageField(blank=True, null=True, upload_to='speakers/', verbose_name='photo')),
            ],
            options={
                'verbose_name': 'speaker',
                'verbose_name_plural': 'speakers',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('iframe_url', models.URLField(verbose_name='iframe URL')),
                ('is_vertical', models.BooleanField(default=False, verbose_name='vertical')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='videos/', verbose_name='thumbnail')),
            ],
            options={
                'verbose_name': 'video',
                'verbose_name_plural': 'videos',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook_link', models.URLField(blank=True, null=True, verbose_name='facebook page')),
                ('youtube_link', models.URLField(blank=True, null=True, verbose_name='youtube page')),
                ('instagram_link', models.URLField(blank=True, null=True, verbose_name='instagram page')),
                ('x_link', models.URLField(blank=True, null=True, verbose_name='x page')),
                ('tiktok_link', models.URLField(blank=True, null=True, verbose_name='tiktok page')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos/', verbose_name='logo')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                (
                    'introduction',
                    ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='introduction'),
                ),
                (
                    'description',
                    ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='description'),
                ),
                (
                    'partners_text',
                    models.CharField(blank=True, max_length=255, null=True, verbose_name='partners section text'),
                ),
                (
                    'max_registrations',
                    models.IntegerField(blank=True, null=True, verbose_name='maximum number of registrations'),
                ),
                (
                    'privacy_policy',
                    ckeditor_uploader.fields.RichTextUploadingField(
                        blank=True, null=True, verbose_name='privacy policy'
                    ),
                ),
                (
                    'regulations',
                    ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='regulations'),
                ),
                (
                    'privacy_policy_checkbox',
                    models.TextField(blank=True, null=True, verbose_name='consent text in form'),
                ),
                (
                    'additional_description',
                    ckeditor_uploader.fields.RichTextUploadingField(
                        blank=True, null=True, verbose_name='additional description'
                    ),
                ),
                ('date_start', models.DateTimeField(default=django.utils.timezone.now, verbose_name='start date')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='city')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='address')),
                ('place', models.CharField(blank=True, max_length=100, null=True, verbose_name='place')),
                (
                    'background_image',
                    models.ImageField(blank=True, null=True, upload_to='events/', verbose_name='background image'),
                ),
                ('promo_movie_html', models.TextField(blank=True, null=True, verbose_name='promotional video iframe')),
                (
                    'footer_text',
                    ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='footer text'),
                ),
                (
                    'google_tag_manager_id',
                    models.CharField(blank=True, max_length=50, null=True, verbose_name='google tag manager id'),
                ),
                (
                    'form',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='dynamo_forms.form',
                        verbose_name='event form',
                    ),
                ),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='EventBundle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                (
                    'description',
                    ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='description'),
                ),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('is_sold_out', models.BooleanField(default=False, verbose_name='is sold out')),
                (
                    'event',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='event_bundles',
                        to='events.event',
                        verbose_name='event',
                    ),
                ),
            ],
            options={
                'verbose_name': 'event bundle',
                'verbose_name_plural': 'event bundles',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventBundleCodeDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('code', models.CharField(max_length=50, verbose_name='discount code')),
                (
                    'discount',
                    models.DecimalField(decimal_places=2, default=0, max_digits=7, verbose_name='discount value'),
                ),
                (
                    'event_bundle',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='discounts',
                        to='events.eventbundle',
                        verbose_name='event bundle',
                    ),
                ),
            ],
            options={
                'verbose_name': 'discount code',
                'verbose_name_plural': 'discount codes',
                'unique_together': {('code', 'event_bundle')},
            },
        ),
        migrations.CreateModel(
            name='EventBundlePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=100, verbose_name='title')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=7, verbose_name='price')),
                ('activity_range', django.contrib.postgres.fields.ranges.DateRangeField(verbose_name='valid dates')),
                (
                    'event_bundle',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='prices',
                        to='events.eventbundle',
                        verbose_name='event bundle',
                    ),
                ),
            ],
            options={
                'verbose_name': 'bundle cost',
                'verbose_name_plural': 'bundle costs',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventCounter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                (
                    'counter',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='events.counter', verbose_name='counter'
                    ),
                ),
                (
                    'event',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='event_counters',
                        to='events.event',
                        verbose_name='event',
                    ),
                ),
            ],
            options={
                'verbose_name': 'event counter',
                'verbose_name_plural': 'event counters',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='event',
            name='counters',
            field=models.ManyToManyField(
                blank=True, through='events.EventCounter', to='events.counter', verbose_name='counters'
            ),
        ),
        migrations.CreateModel(
            name='EventScript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'event',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='event_scripts',
                        to='events.event',
                        verbose_name='event',
                    ),
                ),
                (
                    'script',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='script_manager.script', verbose_name='script'
                    ),
                ),
            ],
            options={
                'verbose_name': 'event script',
                'verbose_name_plural': 'event scripts',
            },
        ),
        migrations.CreateModel(
            name='EventPartner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                (
                    'event',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='event_partners',
                        to='events.event',
                        verbose_name='event',
                    ),
                ),
                (
                    'partner',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='events.partner', verbose_name='partner'
                    ),
                ),
            ],
            options={
                'verbose_name': 'event partner',
                'verbose_name_plural': 'event partners',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='event',
            name='partners',
            field=models.ManyToManyField(
                blank=True, through='events.EventPartner', to='events.partner', verbose_name='partners'
            ),
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('phone', models.CharField(blank=True, default='', max_length=25, verbose_name='phone')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                (
                    'unique_code',
                    models.CharField(
                        default=apps.events.utils.generate_unique_code,
                        max_length=50,
                        unique=True,
                        verbose_name='unique code',
                    ),
                ),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='registration date')),
                ('is_paid', models.BooleanField(default=False, verbose_name='paid')),
                (
                    'paid_amount',
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='paid amount'
                    ),
                ),
                ('tpay_notification', models.JSONField(blank=True, null=True)),
                (
                    'event',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='registrations',
                        to='events.event',
                        verbose_name='event',
                    ),
                ),
                (
                    'selected_bundle',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='events.eventbundle',
                        verbose_name='selected bundle',
                    ),
                ),
                (
                    'selected_code_discount',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='events.eventbundlecodediscount',
                        verbose_name='selected discount code',
                    ),
                ),
                (
                    'user_answers',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='registration',
                        to='dynamo_forms.useranswers',
                        verbose_name='customer answers',
                    ),
                ),
            ],
            options={
                'verbose_name': 'registration',
                'verbose_name_plural': 'registrations',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='EventSpeaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                (
                    'event',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='event_speakers',
                        to='events.event',
                        verbose_name='event',
                    ),
                ),
                (
                    'speaker',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='events.speaker', verbose_name='speaker'
                    ),
                ),
            ],
            options={
                'verbose_name': 'event speaker',
                'verbose_name_plural': 'event speakers',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventPlanItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('hours', models.CharField(blank=True, max_length=30, null=True, verbose_name='hours')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='plan/', verbose_name='image')),
                (
                    'event',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='plan_items',
                        to='events.event',
                        verbose_name='event',
                    ),
                ),
                (
                    'speaker',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='events.speaker',
                        verbose_name='speaker',
                    ),
                ),
            ],
            options={
                'verbose_name': 'plan item',
                'verbose_name_plural': 'plan items',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='event',
            name='speakers',
            field=models.ManyToManyField(
                blank=True, through='events.EventSpeaker', to='events.speaker', verbose_name='speakers'
            ),
        ),
    ]
